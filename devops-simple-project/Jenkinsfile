pipeline {
  agent any
  environment {
    DOCKERHUB_REPO = "<DOCKER_HUB_USER>/devops-simple-app"
    IMAGE_TAG = "latest"
    KUBECONFIG_CREDENTIALS = "kubeconfig-cred-id" // store kubeconfig in Jenkins credentials (secret file)
    DOCKERHUB_CREDENTIALS = "dockerhub-cred-id"
    REACT_APP_VERSION = "1.0.0"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Build Docker Image') {
      steps {
        script {
          sh "docker build --build-arg REACT_APP_VERSION=${env.REACT_APP_VERSION} -t ${DOCKERHUB_REPO}:${IMAGE_TAG} ."
        }
      }
    }
    stage('Push Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          sh "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"
        }
      }
    }
    stage('Deploy to Kubernetes') {
      steps {
        withCredentials([file(credentialsId: env.KUBECONFIG_CREDENTIALS, variable: 'KUBECONFIG_FILE')]) {
          sh 'export KUBECONFIG=$KUBECONFIG_FILE'
          sh 'kubectl apply -f k8s/deployment.yaml'
          sh 'kubectl apply -f k8s/service.yaml'
        }
      }
    }
  }
  post {
    always {
      sh 'docker image prune -af || true'
    }
  }
}

